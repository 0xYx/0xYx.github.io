<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0xYx</title>
    <link>https://0xYx.github.com/</link>
    <description>Recent content on 0xYx</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;http://www.yingxinsong.com&#34;&gt;yingxinsong&lt;/a&gt; 2021</copyright>
    <lastBuildDate>Tue, 28 Sep 2021 12:36:50 +0800</lastBuildDate><atom:link href="https://0xYx.github.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>逆向Unity3D Asset Bundle</title>
      <link>https://0xYx.github.com/post/first-post/</link>
      <pubDate>Tue, 28 Sep 2021 12:36:50 +0800</pubDate>
      
      <guid>https://0xYx.github.com/post/first-post/</guid>
      <description>前几个月因为项目的原因，想要看一下一个售卖3D手办的软件是怎么实现的，并且想看看有没有能力获取到里面的3D模型。拿到安装包之后，还是按照惯例直接砸壳调试分析了一下：
结果启动之后，直接挂了。定位一下，有很明确的关于License的校验：
打开他的lib文件看一下，从上图能看出，这个ImglyKit 跟PhotoEditorSDK 是依赖关系，因为ImglyKit开了校验，所以直接挂了。这里有意思的是他还提示你应该联系他的销售购买正版授权什么的。 老办法，用hoppers看一下加载的代码，找到加载入口，然后用logos把这一块加载的代码干掉再说：
%hook RNPESDKImglyKit - (void)unlockWithLicense:(id)license { // 实际上是这个导致的，我们让他不要调用原来的方法 NSLog(@&amp;quot;hook unlockWithLicense&amp;quot;); %log; } %end 处理之后果然，这里可以看到bundleid 是不一样的：
下一步又受阻了，检测到越狱，不给调试：
这还不是一个简单的遮罩，看起来是检查到越狱直接不给调试了。大胆猜测一下，不会有一个函数叫jailBroken吧：
真的有，那么把他也干掉：
%hook JailMonkey - (BOOL)isJailBroken { NSLog(@&amp;quot;hook isJailBroken&amp;quot;); %log; return NO; } %end 搞定，接下来就是分析他的渲染以及使用的模型：
 2021-06-17 16:58:49.674491+0800 Veve[2816:236864] -[&amp;lt;RNUnityView: 0x10fd2b9e0&amp;gt; setUnityView:&amp;lt;UnityView: 0x11d5ce960; frame = (0 0; 375 812); autoresize = W+H; layer = &amp;lt;CAMetalLayer: 0x283c3be60&amp;raquo;]
 分析发现他渲染是用的Unity,底层是CAMetalLayer，但是这些都不重要，我的目标是搞到他渲染的模型。一期到这里的时候就卡住了，原因是我没有办法找到这个unity渲染的入口函数，只能知道他是用什么做渲染的显然是不够的。为了解决这个问题，我们可以从UnityFramework这个库着手分析看看。继续用hoppers逆向分析一下这个库看一下：
可以看出他并没有很顺利的拿到符号，反而分析出了一堆 sub_hex 的地址一样的函数名。如果符号也没有，那下一步应该怎么走呢？这个时候我的思路还是想回到原理，看一下unity是怎么打包的。所以接下来介绍三个概念：
 iL &amp;ndash; 中间代码，各种语言都可以编译成中间代码，然后再根据平台特性转化为最终代码 mono虚拟机 &amp;ndash; 包含把C# 代码转化为iL 中间代码的工具，跨平台的运行.</description>
    </item>
    
  </channel>
</rss>
