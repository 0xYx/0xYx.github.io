<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kapuseru</title>
    <link>https://www.yingxinsong.com/</link>
    <description>Recent content on Kapuseru</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Kapuseru - yingxinsong</copyright>
    <lastBuildDate>Thu, 02 Dec 2021 17:22:23 +0800</lastBuildDate><atom:link href="https://www.yingxinsong.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>直播中台搭建指南</title>
      <link>https://www.yingxinsong.com/posts/build_live_center/</link>
      <pubDate>Thu, 02 Dec 2021 17:22:23 +0800</pubDate>
      
      <guid>https://www.yingxinsong.com/posts/build_live_center/</guid>
      <description>前言 自从头条搭上短视频这条快车道，做出了抖音这款风靡全世界的现象级产品。人们不禁都在想，他们到底用了什么技术？为什么头条能成功？其中不乏有神化创始人的，也有真的去探究背后的技术的。我身为所谓”竞争对手“公司的一份子，也不免常常被安利。其中听得最多的就是&amp;quot;中台&amp;quot;二字。
什么是中台 如果让我来回答这个问题，我觉得其实根本没有什么中台。所谓的中台概念，也只是软件开发过程中为了提速软件开发效率的产物之一，组件化，微服务等等概念，其目的都是为了减少软件开发过程中的重复劳动，降低试错成本。笔者大概在2013年的时候，就有接触过一篇很有意思的文章:Stevey&amp;rsquo;s Google Platforms Rant。作者喷了一大堆亚马逊的抉择是如何如何差，Google是如何如何好。到最后却反过来讲了亚马逊的平台做的如何好，以及杰夫贝佐斯竟然可以在软件领域也有先知卓见，搭建了亚马逊的平台。里面也有一些对微软，苹果的评价，相当有趣。
搭建直播中台 虽然我并不认同这个概念，不过大概从19年底开始，部门内部的研发就开始出现各种搭建中台的声音，到现在也是不绝于耳。无论是什么业务，不管能不能真正的复用，先命名为XX中台，占个坑位。彼时我刚好转型独立负责一个产品的客户端开发，所以我也不能免俗，决定从负责的直播业务着手，搭建一款直播中台。 直播中台的目标，主要有两个：
 吃自己的狗粮 支撑多个产品线 下面我从将从我的实践与我的反思两个方面来总结这部分的工作。  直播中台实践 &amp;ndash; 基础架构 首先放出整体的架构图：
为了整体的业务尽可能的达到可复用性，首先我将整体的业务划分为五层，每一层组件与上层组件之间呈现单项依赖关系，这样做的好处就是可以做到最大程度的解耦。
基础服务层 基础服务层分为两部分，与直播能力有关的如推拉流的SDK，美颜，伴奏处理等能力，可以抽象成跨平台的中间件，这部分的能力虽然与业务无关，但是最好还是在这上面封装一层抽象层。方便后续替换SDK。另外，在处理SDK的数据层面上，也最好使用原始数据。更理想一点，可以搭建一套自己的渲染流程。 这里需要注意的点，主要是需要处理好原始数据的兼容性。比如yuv数据在安卓机器上会存在按16位对其的问题。在对耳返的处理上，安卓也需要处理好硬件耳返与软件耳返的能力等。这些能力通常来说并不属于推拉流SDK，或者是美颜相关的业务。但是却可以做成基础能力。
业务服务层 业务服务层，是对直播间状态机的抽象。粗略划分有下面几类：
   分类 服务     基础服务 进房流程、心跳、推拉流、美颜、IM信令、最小化、生命周期   基础业务服务 连麦、PK、清晰度切换 等基础玩法   扩展业务服务 红包、官方房间 等业务玩法    直播业务的特点在于，相比于传统页面的CURD，直播业务的玩法往往有相当多的状态同步。业务服务层仅包含与业务后台状态同步相关的实现，记录业务状态的数据。原则上来说，这一层非常考验研发同学的抽象能力。举例来说，一个连麦业务与后台交互的状态可能有以下这些：
连麦状态
 未连麦 等待队列中 正在麦上，状态正常 已同意上麦 静音  对于后台业务来说，这几个状态位就已经足够了，因为后台只处理纯数据的轮转。一种办法就是我们如实的去实现这五个接口，依赖于使用组件的同学来消化五个接口的意义，由于前端的业务往往与UI交互相关，那么这部分的工作就不可避免的与UI代码互相耦合了。业务服务层的意义，就是要消化这部分的状态轮转，并提供可读性好的接口。上面的五个状态，可以根据业务需求转化出用户的操作，与后台的响应两部分接口。在协议上可以分为：
Action: // 用户 requestConnect(); cancelConnect(); stopConnect(); //主播 acceptConncetRequest(); refuseConncetRequest(); muteUser(); kickoutUser(); Listener: // 处理状态同步与一些异常事件 onUserConnectStatusUpdate(Status status); onConncetTimeOut(); .</description>
    </item>
    
    <item>
      <title>工程师自检手册</title>
      <link>https://www.yingxinsong.com/posts/hiring/</link>
      <pubDate>Thu, 30 Sep 2021 17:22:36 +0800</pubDate>
      
      <guid>https://www.yingxinsong.com/posts/hiring/</guid>
      <description>在这个职场中，我觉得每一个单纯的工程师都应该有一个要做与不要做的手册，每次头脑发热做事情的时候，应该拿出来自检一下。下面，就是我从很多地方吸收的&amp;quot;办公室真理&amp;quot;，当然，后面也许还会收集更多：
不要做 1. 闷头努力，从不汇报  吃力不讨好，功劳全部落入别人手里，出了问题，好吧，你来背锅
 2. 从不说不  这个也可以做，那个也可以做，工期越拉越长，bug 越积越多
 3. 框架没搭，就先优化  是人都会知道，一个work的版本，要比一个完美版更加重要。长点心吧，先跑通、再优化，相信我，这真是一个真理
 4. 抱怨一堆，代码没写  总有人觉得产品需求这不合理，那不合理。老板觉得合理，你觉得有问题，你算老几？
 5. 相信框架，相信银弹  引入这个框架就能解决A问题，接入那个组件可以解决B问题。结果呢？头痛医头，脚痛医脚！
 6. 眼高手低，像个菜鸡  技术需求就牛逼？业务需求就垃圾？你也就会CURD！
 要做 1. 勤写总结，多发邮件  就要这么干！怒刷存在感！
 2. 开会必到，使命必达  开会没有你，那就开不下去。问题没有你，那就没有底。
 3. 凌晨3点，定位问题  睡觉那是给死人的 00：30：&amp;ldquo;这个怎么刷不出来了?&amp;rdquo; 00：30：&amp;ldquo;收到，我立马看看！&amp;rdquo;
 4. 干活之前，先提问题  确认问题的归属非常重要 &amp;ldquo;这个怎么刷不出来？客户端看看？&amp;rdquo; &amp;ldquo;安卓iOS都刷不出来，服务端看看？&amp;rdquo;
 5. 同步进度，保留证据  因为我的问题延期了？不存在的，10天以前就同步了，当时你也同意了！
 </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.yingxinsong.com/about/</link>
      <pubDate>Wed, 29 Sep 2021 14:46:26 +0800</pubDate>
      
      <guid>https://www.yingxinsong.com/about/</guid>
      <description>Who？ 我是一名工程师，目前就职于某互联网公司，对iOS、音视频、逆向、游戏等技术都非常有兴趣。同时我也是一个钓鱼爱好者，平时喜欢跟朋友一起去钓鱼。
Contact Me Email:me(At)yingxinsong.com</description>
    </item>
    
    <item>
      <title>逆向Unity3D Asset Bundle</title>
      <link>https://www.yingxinsong.com/posts/unity3d-decrypt/</link>
      <pubDate>Tue, 28 Sep 2021 12:36:50 +0800</pubDate>
      
      <guid>https://www.yingxinsong.com/posts/unity3d-decrypt/</guid>
      <description>前几个月因为项目的原因，想要看一下一个售卖3D手办的软件是怎么实现的，并且想看看有没有能力获取到里面的3D模型。拿到安装包之后，还是按照惯例直接砸壳调试分析了一下：
结果启动之后，直接挂了。定位一下，有很明确的关于License的校验：
打开他的lib文件看一下，从上图能看出，这个ImglyKit 跟PhotoEditorSDK 是依赖关系，因为ImglyKit开了校验，所以直接挂了。这里有意思的是他还提示你应该联系他的销售购买正版授权什么的。 老办法，用hoppers看一下加载的代码，找到加载入口，然后用logos把这一块加载的代码干掉再说：
%hook RNPESDKImglyKit - (void)unlockWithLicense:(id)license { // 实际上是这个导致的，我们让他不要调用原来的方法 NSLog(@&amp;quot;hook unlockWithLicense&amp;quot;); %log; } %end 处理之后果然，这里可以看到bundleid 是不一样的：
下一步又受阻了，检测到越狱，不给调试：
这还不是一个简单的遮罩，看起来是检查到越狱直接不给调试了。大胆猜测一下，不会有一个函数叫jailBroken吧：
真的有，那么把他也干掉：
%hook JailMonkey - (BOOL)isJailBroken { NSLog(@&amp;quot;hook isJailBroken&amp;quot;); %log; return NO; } %end 搞定，接下来就是分析他的渲染以及使用的模型：
 2021-06-17 16:58:49.674491+0800 Veve[2816:236864] -[&amp;lt;RNUnityView: 0x10fd2b9e0&amp;gt; setUnityView:&amp;lt;UnityView: 0x11d5ce960; frame = (0 0; 375 812); autoresize = W+H; layer = &amp;lt;CAMetalLayer: 0x283c3be60&amp;raquo;]
 分析发现他渲染是用的Unity,底层是CAMetalLayer，但是这些都不重要，我的目标是搞到他渲染的模型。一期到这里的时候就卡住了，原因是我没有办法找到这个unity渲染的入口函数，只能知道他是用什么做渲染的显然是不够的。为了解决这个问题，我们可以从UnityFramework这个库着手分析看看。继续用hoppers逆向分析一下这个库看一下：
可以看出他并没有很顺利的拿到符号，反而分析出了一堆 sub_hex 的地址一样的函数名。如果符号也没有，那下一步应该怎么走呢？这个时候我的思路还是想回到原理，看一下unity是怎么打包的。所以接下来介绍三个概念：
 iL &amp;ndash; 中间代码，各种语言都可以编译成中间代码，然后再根据平台特性转化为最终代码 mono虚拟机 &amp;ndash; 包含把C# 代码转化为iL 中间代码的工具，跨平台的运行.</description>
    </item>
    
  </channel>
</rss>
